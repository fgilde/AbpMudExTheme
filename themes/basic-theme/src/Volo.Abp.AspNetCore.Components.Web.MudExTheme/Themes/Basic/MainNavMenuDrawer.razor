
@using MudBlazor.Extensions.Options
@inherits MudDrawer

@Inherited()

@code {


    protected RenderFragment Inherited() => builder => base.BuildRenderTree(builder);

    private RenderFragment HeaderContent()
    {
        if (ThemeManager?.CurrentTheme is { CanPinDrawer: false, CanChangeDrawerExpandMode: false })
            return @<p></p>;
        return @<MudDrawerHeader Style="min-height: 0">
        <div style="@SettingsContainerStyle()">
            @if (!MiniAndClosed())
            {
                @SettingsButtons()
            }
            else
            {
                <div>
                        <MudIconButton Style="" Class="nav-settings-btn" OnClick="@ToggleOpen" Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Settings" />
                    <MudExPopover Duration="400" Animation="AnimationType.Perspective3d" AnimationPosition="DialogPosition.CenterRight" OnBlur="@OnBlur" SelectorsForIgnoreBlur=".nav-settings-btn" Open="_popoverOpen"
                                  AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">
                        @SettingsButtons()
                    </MudExPopover>
                </div>
            }
        </div>
    </MudDrawerHeader>;
    }

    private RenderFragment SettingsButtons()
    {
        return @<div>
            @if (ThemeManager?.CurrentTheme?.CanPinDrawer == true)
            {
                <MudToggleIconButton Size="MudBlazor.Size.Small" ToggledSize="MudBlazor.Size.Small" @bind-Toggled="@Pinned" Title="Pin" ToggledTitle="Unpin" Icon="@Icons.Material.Outlined.PushPin" ToggledIcon="@Icons.Material.Filled.PushPin" ToggledColor="@MudBlazor.Color.Warning" />
            }
            @if (ThemeManager?.CurrentTheme?.CanChangeDrawerExpandMode == true)
            {
                <MudToggleIconButton Size="MudBlazor.Size.Small" ToggledSize="MudBlazor.Size.Small" @bind-Toggled="@SingleExpand" Title="Single expand" ToggledTitle="Multi expand" Icon="@Icons.Material.Outlined.Expand" ToggledIcon="@Icons.Material.Outlined.Expand" ToggledColor="@MudBlazor.Color.Warning" />
            }
        </div>;
    }

    private RenderFragment MenuContent()
    {
        return @<NavMenu @ref="Menu"
         IsMini="(!Open && Variant == DrawerVariant.Mini)"
         ShowApplicationLogo="@ShowLogoInMenu()"
         ShowUserCard="@ShowUserInMenu()"
             ExpandBehaviour="GetExpandMode()" />;
    }

    private RenderFragment DrawerContent()
    {
        return AllowSettingsChange
            ? builder => {
                HeaderContent()(builder);
                MenuContent()(builder);
            }
            : MenuContent();
    }


    private bool _popoverOpen;
    private void OnBlur() => _popoverOpen = false;
    public void ToggleOpen()
    {
        _popoverOpen = !_popoverOpen;
        StateHasChanged();
    }

}


