@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Core.Enums
@using Volo.Abp.AspNetCore.Components.Web.MudExTheme.Extensions
@using Size = MudBlazor.Size
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer

<div>
    @if (ShowApplicationLogo && !IsMini)
    {
        <div class="d-flex justify-center mt-4 mb-4">
            <Branding />
        </div>
        <MudDivider Class="mb-2" />
    }

@*     @if (ShowUserCard && User?.Identity?.IsAuthenticated == true && !User.IsGuest())
    {
        @if (IsMini)
        {
            <div class="mini-avatar">
                <UserAvatar />
            </div>
        }
        else
        {
            <UserCard Logout="Logout" ShowEmail="false" ShowLogout="false" />
        }
        <MudDivider Class="mb-2" />
    } *@

    @if (Entries != null)
    {
        <MudExTreeView SelectedItemBackgroundColor="@(SelectedNavEntry?.HasChildren == true || ViewMode != TreeViewMode.Default ? MudExColor.Default : MudExColor.HoverBackground)"
                       @bind-SelectedNode="SelectedNavEntry"
                       AllowedToSelectFunc="@HasAction"
                       ItemContentStyle="font-size:14px;"
                       FilterChipsPlacedRight="true"
                       ExpandOnFilter="true"
                       Parameters="@(new Dictionary<string, object>() { { nameof(ExpandBehaviour), ExpandBehaviour }, { nameof(MudExTreeViewList<NavigationEntry>.RenderHomeLink), false }, { nameof(MudExTreeViewList<NavigationEntry>.BackLinkLabel), "Back" } })"
                       FilterMode="@(ThemeManager.CurrentTheme?.ShowFilterInDrawer == true && !IsMini && ViewMode != TreeViewMode.Breadcrumb ? PropertyFilterMode.AlwaysVisible : PropertyFilterMode.Disabled)"
                       FilterBoxStyle="margin:10px;"
                       TextFunc="@(entry => Locale(entry.Text))"
                       Style="margin: 0 10px;"
                       ExpandButtonDirection="LeftOrRight.Right"
                       @bind-ViewMode="@ViewMode"
                       ItemTemplate="@(IsMini? MiniItemTemplate : DefaultTemplate)"
                       TreeViewModeToggleComponent="@(_toggleableViewModes?.Contains(ViewMode) == true ? TreeViewModeToggleComponent.ToggleButton : TreeViewModeToggleComponent.None)"
                       ToggleableViewModes="@_toggleableViewModes"
                       Items="@GetEntries()">
            <ItemContentTemplate>
                <div style="display: flex; align-items: center; width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    @if (!string.IsNullOrWhiteSpace(context?.Value?.Icon))
                    {
                        <MudIcon Color="@context.Value.GetIconColor()" Size="Size.Small" Icon="@context.Value.Icon" Class="ml-0 mr-2" />
                    }
                    @context?.TreeView?.RenderItemContent(context)
                </div>
            </ItemContentTemplate>
        </MudExTreeView>
    }
</div>

@code {
    private TreeViewMode[] _toggleableViewModes = new[] { TreeViewMode.Default, TreeViewMode.List, TreeViewMode.FlatList };
    private RenderFragment DefaultTemplate(TreeViewItemContext<NavigationEntry> context)
    {
        return context.TreeView.RenderItem(context);
    }

    private RenderFragment MiniItemTemplate(TreeViewItemContext<NavigationEntry> context)
    {
        return @<RenderChild Condition="HasAction(context.Value)">
            <MudExIconButton Size="Size.Small" OnClick="@(() => context.TreeView.NodeClick(context.Value))" ToolTip="@context.TreeView.TextFunc(context.Value)" Icon="@context.Value.FindIcon()" Class="ml-1 mt-1"/>
        </RenderChild>;
    }
}


