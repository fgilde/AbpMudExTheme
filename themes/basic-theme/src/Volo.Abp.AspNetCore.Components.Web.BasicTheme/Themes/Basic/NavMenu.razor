@using MudBlazor.Extensions.Core
@using MudBlazor.Extensions.Core.Enums
@using Size = MudBlazor.Size
@inject NavigationManager NavigationManager
<MudExTreeView SelectedItemBackgroundColor="@(SelectedNavEntry?.HasChildren == true || ViewMode != TreeViewMode.Default ? MudExColor.Default : MudExColor.HoverBackground)"
               @bind-SelectedNode="SelectedNavEntry"
               AllowedToSelectFunc="@HasAction"
               ItemContentStyle="font-size:14px;"
               FilterChipsPlacedRight="true"
               ExpandOnFilter="true"
               Parameters="@(new Dictionary<string, object>() {{nameof(ExpandBehaviour), ExpandBehaviour}})"
               FilterMode="@(PropertyFilterMode.AlwaysVisible)"
               FilterBoxStyle="margin:10px;"
               Style="margin: 0 10px;"
               ExpandButtonDirection="LeftOrRight.Right"
               @bind-ViewMode="@ViewMode"
               TreeViewModeToggleComponent="@(_toggleableViewModes?.Contains(ViewMode) == true ? TreeViewModeToggleComponent.ToggleButton : TreeViewModeToggleComponent.None)"
               ToggleableViewModes="@_toggleableViewModes"
               Items="@Entries">
    <ItemContentTemplate>
        <div style="display: flex; align-items: center; width: 100%; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
            @if (!string.IsNullOrWhiteSpace(context?.Value?.Icon))
            {
                <MudIcon Color="@context.Value.GetIconColor()" Size="Size.Small" Icon="@context.Value.Icon" Class="ml-0 mr-2" />
            }
            @context?.TreeView?.RenderItemContent(context)
        </div>
    </ItemContentTemplate>
</MudExTreeView>


@code {
    private TreeViewMode[] _toggleableViewModes = new[] { TreeViewMode.Default, TreeViewMode.List, TreeViewMode.FlatList };

}

@* @if (Menu != null)
{
    foreach (var menuItem in Menu.Items)
    {
        <FirstLevelNavMenuItem MenuItem="menuItem" />
    }
} *@
